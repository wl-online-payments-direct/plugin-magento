type Query {
    getWorldlineConfig: WorldlineConfig @resolver(class: "\\Worldline\\Payment\\CreditCard\\GraphQl\\Resolver\\WorldlineConfig") @doc(description: "Retrieve config.")
    checkRedirect(incrementId: String!): CheckRedirectOutput @resolver(class: "\\Worldline\\Payment\\GraphQl\\Model\\Resolver\\Redirect") @doc(description: "Retrieve redirect status.")
    processCCResult(paymentId: String!, mac: String!): ProcessPaymentResultOutput @resolver(class: "\\Worldline\\Payment\\CreditCard\\GraphQl\\Resolver\\RequestResult") @doc(description: "Process credit card response.")
    processHCResult(paymentId: String!, mac: String!): ProcessPaymentResultOutput @resolver(class: "\\Worldline\\Payment\\HostedCheckout\\GraphQl\\Resolver\\RequestResult") @doc(description: "Process hosted checkout response.")
}

type WorldlineConfig @doc(description:"Contains information.") {
    url: String @doc(description:"URL for iFrame")
    icons: [String] @doc(description:"List of enabled card types")
}

input PaymentMethodInput {
    worldline_cc: WorldlineCcInput
    worldline_cc_vault: WorldlineVaultInput
    worldline_hosted_checkout_vault: WorldlineVaultInput
}

input WorldlineCcInput {
    is_active_payment_token_enabler: Boolean! @doc(description:"States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Worldline payment integration.")
    hosted_tokenization_id: String @doc(description:"Contains a hosted tokenization id session provided by Worldline SDK and should be sent with sale transaction details to the Worldline payment gateway.")
}

input WorldlineVaultInput {
    public_hash: String!
    hosted_tokenization_id: String @doc(description:"Contains a hosted tokenization id session provided by Worldline SDK and should be sent with sale transaction details to the Worldline payment gateway.")
}

type AvailablePaymentMethod {
    icons: [IconDetailsOutput] @resolver(class: "\\Worldline\\Payment\\GraphQl\\Model\\Resolver\\PaymentMethodIcons")
}

type IconDetailsOutput {
    icon_title: String @doc(description: "Icon card type")
    icon_url: String @doc(description: "Icon url")
}

type CheckRedirectOutput {
    url: String
}

type PaymentToken {
    token: String @doc(description:"Gateway Token")
}

type ProcessPaymentResultOutput {
    result: String
    orderIncrementId: String
}

type StoreConfig @doc(description: "The type contains information about a store config") {
    worldline_cc_vault_active: String @doc(description: "Worldline CC vault status")
    worldline_credit_card_pwa_route: String @doc(description: "Worldline CC Custom Return URL")
    worldline_hosted_checkout_pwa_route: String @doc(description: "Worldline HC Custom Return URL")
    worldline_payment_credit_card_allowspecific: Boolean @doc(description: "CC: Payment from Applicable Countries")
    worldline_payment_credit_card_specificcountry: String @doc(description: "CC: Payment from Specific Countries")
    worldline_payment_hosted_checkout_allowspecific: Boolean @doc(description: "HC: Payment from Applicable Countries")
    worldline_payment_hosted_checkout_specificcountry: String @doc(description: "HC: Payment from Specific Countries")
}

type Mutation {
    processCCCreateRequest(input: ProcessRequestInput): ProcessPaymentRequestOutput @resolver(class: "\\Worldline\\Payment\\CreditCard\\GraphQl\\Resolver\\CreateRequest") @doc(description: "Process credit card create request.")
    processHCRedirectRequest(input: ProcessRequestInput): ProcessPaymentRequestOutput @resolver(class: "\\Worldline\\Payment\\HostedCheckout\\GraphQl\\Resolver\\RequestRedirect") @doc(description: "Process hosted checkout redirect request.")
}

input ProcessRequestInput @doc(description: "Defines the input to run the processHCRedirectRequest mutation") {
    cart_id: String! @doc(description: "The unique ID of a `Cart` object.")
    payment_method: PaymentMethodHCRedirectInput! @doc(description: "The payment method data.")
}

input PaymentMethodHCRedirectInput {
    code: String! @doc(description: "The internal name for the payment method.")
}

type ProcessPaymentRequestOutput {
    redirect_url: String
}
